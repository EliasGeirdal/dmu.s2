package bagopgave;import java.util.Arrays;public class ArrayBag<E> implements Bag<E> {	private E[] array;	private int currentSize;	@SuppressWarnings("unchecked")	public ArrayBag() {		int INITIAL_SIZE = 22;		array = (E[]) new Object[INITIAL_SIZE];		currentSize = 0;	}	@Override	public int getCurrentSize() {		return currentSize;	}	@Override	public boolean isFull() {		return currentSize == array.length;	}	@Override	public boolean isEmpty() {		return currentSize == 0;	}	@Override	public boolean add(E newEntry) {		if (isFull()) {			return false;		}		array[currentSize] = newEntry;		currentSize++;		return true;	}	@Override	public E remove() {		if (isEmpty()) {			return null;		}		E removed = array[currentSize - 1];		array[currentSize - 1] = null;		currentSize--;		return removed;	}	@Override	public boolean remove(E anEntry) {		if (!contains(anEntry)) {			return false;		}		for (int i = 0; i <= currentSize; i++) {			if (array[i].equals(anEntry)) {				swap(i);				currentSize--;				return true;			}		}		return false;	}	public void swap(int start) {		for (int i = start; i < currentSize; i++) {			array[i] = array[i + 1];		}	}	@SuppressWarnings("unchecked")	@Override	public void clear() {		array = (E[]) new Object[array.length];		currentSize = 0;	}	@Override	public int getFrequencyOf(E anEntry) {		int freq = 0;		for (int i = 0; i < currentSize; i++) {			if (array[i].equals(anEntry))				freq++;		}		return freq;	}	@Override	public boolean contains(E anEntry) {		int i = 0;		while (i < currentSize) {			if (array[i].equals(anEntry)) {				return true;			}			i++;		}		return false;	}	@Override	public E[] toArray() {		return Arrays.copyOf(array, currentSize);	}}